{"ast":null,"code":"var _jsxFileName = \"/Users/kylehton/repos/resume-builder-app/frontend/src/Resume.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useContext } from 'react';\nimport ChatBox from './Components/ChatBox';\nimport ResumeBox from './Components/ResumeBox';\nimport { NavbarContext } from './NavbarContext';\nimport { calculateProgress, getProgressMessage } from './BusinessLogic/ResumeLogic';\nimport ConfirmationModal from './Components/ConfirmationalModal';\nimport './Resume.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Resume = () => {\n  _s();\n  const {\n    isNavbarOpen\n  } = useContext(NavbarContext);\n  const [resumeUrl, setResumeUrl] = useState(null);\n  const [progress, setProgress] = useState(calculateProgress(1)); // Progress state\n  const [progressMessage, setProgressMessage] = useState(getProgressMessage(1)); // Progress message state\n  const [showModal, setShowModal] = useState(false); // Modal state\n  const [isFinished, setIsFinished] = useState(false); // Track whether the user is done\n\n  const handleResumeUpload = url => {\n    setResumeUrl(url); // Update the resume URL in state\n    setProgress(calculateProgress(3)); // Update progress for resume upload\n    setProgressMessage(getProgressMessage(3)); // Set message for resume upload\n  };\n\n  /*\n  const handleAiImprovements = () => {\n    setProgress(calculateProgress(5)); // Progress after AI improvements\n    setProgressMessage(getProgressMessage(5)); // Message after AI improvements\n  };\n  */\n\n  const handleDownload = () => {\n    if (resumeUrl) {\n      // Programmatic download logic\n      const link = document.createElement('a');\n      link.href = resumeUrl;\n      link.download = 'resume.pdf'; // Set a default download filename\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n\n      // Update progress and message\n      setProgress(calculateProgress(7));\n      setProgressMessage(getProgressMessage(7));\n\n      // Show the modal asking if the user is finished\n      setShowModal(true);\n    } else {\n      alert(\"No resume to download.\");\n    }\n  };\n\n  // Handlers for modal buttons\n  const handleModalClose = () => setShowModal(false); // Close modal\n\n  const handleYes = () => {\n    setIsFinished(true); // Mark the resume as finished\n    setShowModal(false); // Close the modal\n\n    // Add further logic if needed, like asking if they want to save the resume\n    if (isFinished) console.log(\"User finished the resume.\");\n  };\n  const handleNo = () => {\n    setShowModal(false); // Close modal and continue working\n  };\n\n  // Handle progress updates from the ChatBox\n  /*\n  const handleAutoMessage = () => {\n    setProgress(calculateProgress(2)); // Progress after auto message\n    setProgressMessage(getProgressMessage(2)); // Message after auto message\n  };\n  */\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `resume-page ${isNavbarOpen ? 'navbar-open' : 'navbar-closed'}`,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"progress-bar-container\",\n      style: {\n        left: isNavbarOpen ? '202px' : '42px'\n      } /* Adjust the start position dynamically*/,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-bar\",\n        style: {\n          width: `${progress}%`\n        },\n        children: [progress, \"%\", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: `progress-message ${progress === 10 ? 'message-right' : progress === 20 ? 'message-flex' : progress < 50 ? 'text-right' : 'text-left'}`,\n          style: {\n            width: '100%'\n          },\n          children: progressMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatBox, {\n      onResumeUpload: handleResumeUpload,\n      onAutoMessage: () => setProgress(calculateProgress(2)),\n      onDownloadClick: handleDownload\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ResumeBox, {\n      resumeUrl: resumeUrl\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), showModal && /*#__PURE__*/_jsxDEV(ConfirmationModal, {\n      onClose: handleModalClose,\n      onYes: handleYes,\n      onNo: handleNo,\n      resumeUrl: resumeUrl\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n_s(Resume, \"Aopbjttxh0OHYUow6RZZoUbMDIQ=\");\n_c = Resume;\nexport default Resume;\nvar _c;\n$RefreshReg$(_c, \"Resume\");","map":{"version":3,"names":["React","useState","useContext","ChatBox","ResumeBox","NavbarContext","calculateProgress","getProgressMessage","ConfirmationModal","jsxDEV","_jsxDEV","Resume","_s","isNavbarOpen","resumeUrl","setResumeUrl","progress","setProgress","progressMessage","setProgressMessage","showModal","setShowModal","isFinished","setIsFinished","handleResumeUpload","url","handleDownload","link","document","createElement","href","download","body","appendChild","click","removeChild","alert","handleModalClose","handleYes","console","log","handleNo","className","children","style","left","width","fileName","_jsxFileName","lineNumber","columnNumber","onResumeUpload","onAutoMessage","onDownloadClick","onClose","onYes","onNo","_c","$RefreshReg$"],"sources":["/Users/kylehton/repos/resume-builder-app/frontend/src/Resume.js"],"sourcesContent":["\nimport React, { useState, useContext } from 'react';\nimport ChatBox from './Components/ChatBox';\nimport ResumeBox from './Components/ResumeBox';\nimport { NavbarContext } from './NavbarContext';\nimport { calculateProgress, getProgressMessage } from './BusinessLogic/ResumeLogic';\nimport ConfirmationModal from './Components/ConfirmationalModal';\n\nimport './Resume.css';\n\nconst Resume = () => {\n    const { isNavbarOpen } = useContext(NavbarContext);\n    const [resumeUrl, setResumeUrl] = useState(null);\n    const [progress, setProgress] = useState(calculateProgress(1)); // Progress state\n    const [progressMessage, setProgressMessage] = useState(getProgressMessage(1)); // Progress message state\n    const [showModal, setShowModal] = useState(false); // Modal state\n    const [isFinished, setIsFinished] = useState(false); // Track whether the user is done\n\n  const handleResumeUpload = (url) => {\n    setResumeUrl(url); // Update the resume URL in state\n    setProgress(calculateProgress(3)); // Update progress for resume upload\n    setProgressMessage(getProgressMessage(3)); // Set message for resume upload\n  };\n\n  /*\n  const handleAiImprovements = () => {\n    setProgress(calculateProgress(5)); // Progress after AI improvements\n    setProgressMessage(getProgressMessage(5)); // Message after AI improvements\n  };\n  */\n\n  const handleDownload = () => {\n    if (resumeUrl) {\n        // Programmatic download logic\n        const link = document.createElement('a');\n        link.href = resumeUrl;\n        link.download = 'resume.pdf'; // Set a default download filename\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n\n        // Update progress and message\n        setProgress(calculateProgress(7));\n        setProgressMessage(getProgressMessage(7));\n\n        // Show the modal asking if the user is finished\n        setShowModal(true);\n    } else {\n        alert(\"No resume to download.\");\n    }\n  };\n\n  // Handlers for modal buttons\n  const handleModalClose = () => setShowModal(false); // Close modal\n\n  const handleYes = () => {\n    setIsFinished(true); // Mark the resume as finished\n    setShowModal(false); // Close the modal\n\n    // Add further logic if needed, like asking if they want to save the resume\n    if (isFinished)\n      console.log(\"User finished the resume.\");\n  };\n\n  const handleNo = () => {\n    setShowModal(false); // Close modal and continue working\n  };\n\n  // Handle progress updates from the ChatBox\n  /*\n  const handleAutoMessage = () => {\n    setProgress(calculateProgress(2)); // Progress after auto message\n    setProgressMessage(getProgressMessage(2)); // Message after auto message\n  };\n  */\n\n  return (\n    <div className={`resume-page ${isNavbarOpen ? 'navbar-open' : 'navbar-closed'}`}>\n      <div className=\"progress-bar-container\" style={{ left: isNavbarOpen ? '202px' : '42px' }} /* Adjust the start position dynamically*/ >\n        <div className=\"progress-bar\" style={{ width: `${progress}%` }}>\n          {progress}%\n          <span className={`progress-message ${progress === 10 ? 'message-right' : progress === 20 ? 'message-flex' : progress < 50 ? 'text-right' : 'text-left'}`} style={{ width: '100%' }} >\n            {progressMessage}\n          </span>\n        </div>\n      </div>\n      <ChatBox onResumeUpload={handleResumeUpload} onAutoMessage={() => setProgress(calculateProgress(2))} onDownloadClick={handleDownload} />\n      <ResumeBox resumeUrl={resumeUrl} />\n\n      {/* Show the modal if the user has downloaded the resume */}\n      {showModal && <ConfirmationModal onClose={handleModalClose} onYes={handleYes} onNo={handleNo} resumeUrl={resumeUrl} />}\n    </div>\n  );\n};\n\nexport default Resume;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}